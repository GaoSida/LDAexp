1
c
demon
co
uk
graham
toal
gtoal
gtoal
com
writes
article
regq
innn
u
gap
caltech
edu
hal
cco
caltech
edu
hal
finney
writes
tried
code
yesterday
sparcstation
elc
take
second
compress
second
worth
speech
mean
need
optimized
factor
usable
even
half
duplex
mode
ouch
thanks
trying
following
program
quick
hack
created
month
ago
determine
whether
sun
sparcstation
ipc
could
perform
real
time
full
duplex
encrypted
audio
resulting
data
rate
sustainable
today
modem
test
program
read
linearly
encoded
audio
audio
device
compress
gsm
compress
frame
bit
sample
recorded
khz
bit
resulting
hz
frame
rate
encrypts
de
revers
process
sends
reconstructed
audio
back
audio
device
compressed
encrypted
audio
stream
kbit
sparcstation
ipc
exactly
fast
machine
day
certainly
slower
elc
would
barely
sustain
activity
audio
underruns
would
occcur
speech
intelligible
ran
real
time
process
get
best
result
remember
though
program
quick
hack
performance
certainly
improved
audio
compression
routine
ftp
d
tub
c
tu
berlin
de
believe
look
gsm
toast
used
eric
young
de
implementation
longer
know
got
cheer
greg
cut
test
program
see
much
cpu
take
secure
digital
audio
written
g
onufer
greg
cheer
bungi
com
written
sun
ipc
running
solaris
sun
isdn
bus
card
speakerbox
include
stdlib
h
include
unistd
h
include
fcntl
h
include
stdio
h
include
sys
type
h
include
sys
audioio
h
include
stropts
h
include
gsm
h
include
de
h
boolean
svs
audio
init
int
fd
audio
info
prev
info
audio
info
info
prev
info
null
ioctl
fd
audio
getinfo
prev
info
perror
audio
getinfo
return
b
false
audio
initinfo
info
info
record
pause
b
true
info
play
pause
b
true
info
play
sample
rate
info
play
encoding
audio
encoding
linear
info
play
channel
info
play
precision
info
record
sample
rate
info
record
encoding
audio
encoding
linear
info
record
channel
info
record
precision
info
record
buffer
size
ioctl
fd
audio
setinfo
info
perror
audio
setinfo
return
b
false
ioctl
fd
flush
flushrw
perror
flush
return
b
false
audio
initinfo
info
info
record
pause
b
false
info
play
pause
b
false
ioctl
fd
audio
setinfo
info
perror
audio
setinfo
return
b
false
return
b
true
boolean
svs
int
ifd
gsm
handle
gsm
byte
buf
gsm
signal
sample
read
ifd
sample
sizeof
sample
sizeof
sample
fprintf
stderr
svs
short
read
n
return
b
false
gsm
encode
handle
sample
buf
return
b
true
boolean
svs
int
ofd
gsm
handle
gsm
byte
buf
gsm
signal
sample
gsm
decode
handle
buf
sample
fprintf
stderr
svs
gsm
decode
failed
n
return
b
false
write
ofd
sample
sizeof
sample
sizeof
sample
fprintf
stderr
svs
short
write
n
return
b
false
return
b
true
main
gsm
handle
gsm
frame
frame
int
audiofd
int
option
de
cblock
key
ivec
ivec
de
key
schedule
k
k
de
cblock
cbuf
cbuf
cbuf
buf
audiofd
open
dev
audio
o
rdwr
audiofd
perror
open
exit
initialize
gsm
compression
code
handle
gsm
create
null
fprintf
stderr
svs
gsm
create
failed
n
exit
option
b
true
gsm
option
handle
gsm
opt
fast
option
fprintf
stderr
svs
gsm
option
fast
failed
n
exit
initialize
de
code
de
random
key
key
de
set
key
key
k
fprintf
stderr
svs
de
set
key
failed
n
exit
de
set
key
key
k
fprintf
stderr
svs
de
set
key
failed
n
exit
memset
ivec
sizeof
ivec
memset
ivec
sizeof
ivec
open
audio
device
configure
svs
audio
init
audiofd
null
exit
get
sample
bit
linear
hz
convert
byte
frame
svs
audiofd
handle
frame
exit
encrypt
decrypt
block
de
cbc
encrypt
frame
cbuf
long
k
ivec
de
encrypt
de
cbc
encrypt
cbuf
cbuf
buf
long
k
ivec
de
decrypt
memmove
frame
cbuf
buf
memcmp
cbuf
cbuf
buf
fprintf
stderr
svs
memcmp
failed
n
exit
endif
take
byte
frame
convert
sample
play
svs
audiofd
handle
frame
exit
gsm
destroy
handle
cut
